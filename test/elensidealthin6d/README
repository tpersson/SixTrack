Tests:
- thin4d and thin6d use the same single and structure elements. Test based on LHC lattice with ELEN inserted at IP4.
- thck4d adds an element 'thicky' with a nonzero length to force the thick 4D tracking to the thin4d/thin6d test.
- thck6d is based on thick6dblocks as the LHC example could not be used as for 6D thick tracking linear elements can not be grouped in blocks -> LHC example as defined fails.
- thin6d_DYNK is like thin6d but the four elenses are assigned time-varying kicks - switch off, pulsing, random on/off, random kick amplitude;
- thin6d_ions is like thin6d but the machine is set for Xe-129 and 7*4 ion species are tracked (see initial.dat); moreover, the simulation starts at IP4;
- thin6d_ions_spec is like thin6d_ions but the four e-lenses give the same kick, even if different species are used;
- thin6d_FOX is like thin6d and checks that the kicks computed by FOX fit with the kicks from the tracking;
- thin6d_FOX_gaussian is similar to thin6d_FOX_uniform, but checks the gaussian distribution. The elens has KL=3E-4 rad/m (requiring 0.34urad at R2=7mm), leading to a hor/ver tune shift of ~5.95E-3/6.29E-3;
- thin6d_FOX_radial is similar to thin6d_FOX_uniform, but checks the radial distribution. The simple case of a uniform radial distribution is taken, and the elens has KL=4E-4 rad/m (ie 4urad at R2=10mm), leading to a hor/ver tune shift of ~7.93E-3/8.39E-3;
- thin6d_FOX_uniform is a one-turn, one-pair calculation, where the user can check that an elens with KL=2E-4 rad/m (ie 2urad at R2=10mm) gives a hor/ver tune shift of ~3.96E-3/4.19E-3;
- thin6d_FOX_wire is like thin6d_fox, but it deploys only 4 degenerate elenses to WIRE;
- thin6d_norm_settings is like thin6d, apart from the settings, which are given in normalised units;
- thin6d_ramp_DYNK is like thin6d but the energy is ramped (0.5MeV/turn, 100k turns) and two elenses are assigned time-varying kicks (pulsing) whereas the other two are kept on;

Python script:
The python script elens_plot_kick.py plots the kick received from the elens. In total 4 elenses are inserted to check 4 different cases:
1) hel1: no offset, UNIFORM e-beam
2) hel2: offset x, offset y, radial e-beam profile as from .txt file, theta_R2 re-calculated
3) hel3: offset x, no offset y, GAUSSIAN e-beam
4) hel4: no offset x, offset y, GAUSSIAN e-beam, theta_R2 re-calculated
The particle coordinates are dumped before and after the 4 elenses in the files HEL_DUMP_*. 3 sets are dumped and processed (beginning/middle/end of simulation):
- first 2k turns;
- turns from 50001 to 52000;
- turns from 95001 to 97000;
The kick given by the elens is then just the difference between the particle coordinates after and before the elens. Various R1 and R2 are set. For further infos, please see fort.3

The script checks that x,y are unchanged (rrin-rrout=0) and then plots the difference in (x'**2+y'**2). The maximum kick given should be theta_r2 indicated by a black line. As the offset is subtracted from x,y, the kick needs to look the same for all 4 cases (see kick.png) - apart from R1 and R2, and shapes. In the case of the ions test, colors identify the different ion species.
